 Creación de repositorio para la práctica

1. Con el navegador, dirígete al repositorio ptavi-p5 en la cuenta del profesor en GitHub1 y realiza un fork, de manera que consigas tener una copia del repositorio en tu cuenta de GitHub. Clona el repositorio que acabas de crear a local para poder editar los archivos. Trabaja a partir de ahora en ese repositorio, sincronizando los cambios que vayas realizando.

Como tarde al final de la práctica, deberás realizar un push para subir tus cambios a tu repositorio en GitHub. En esta práctica, al contrario que con las demás, se recomienda hacer frecuentes commits, pero el push al final.

================================================================================
================================================================================

Análisis de una sesión SIP

Se ha capturado una sesión SIP (archivo sip.cap.gz), que se puede abrir con Wireshark2. Se pide rellenar las cuestiones que se plantean en este guión en el fichero p5.txt que encontrarás también en el repositorio.

2. Observa que las tramas capturadas corresponden a una sesión SIP con Ekiga, un cliente de VoIP para GNOME. Responde a las siguientes cuestiones:
 ** ¿Cuántos paquetes componen la captura?

954

 ** ¿Cuánto tiempo dura la captura?

56,15 segundos

 ** ¿Qué IP tiene la máquina donde se ha efectuado la captura? ¿Se trata de una IP pública o de una IP privada? ¿Por qué lo sabes?

192.168.1.34
Es privada porque corresponde al rango de ip's privadas 192.168.0.0 - 192.168.255.255
Corresponde a la ip privada del ordenador desde el que se ha hecho la captura.


3. Antes de analizar las tramas, mira las estadísticas generales que aparecen en el menú de Statistics. En el apartado de jerarquía de protocolos (Protocol Hierarchy) se puede ver el porcentaje del tráfico correspondiente al protocolo TCP y UDP.
 ** ¿Cuál de los dos es mayor? ¿Es esto consistente con una aplicación que transmite en tiempo real?

UDP
Sí lo es porque UDP no espera a asentimientos y en las aplicaciones de tiempo real esto es mas adecuado que estar esperándolos contínuamente como TCP.

 ** ¿Qué otros protocolos podemos ver en la jerarquía de protocolos?

IP v4, SIP, RTP, RTCP, ICMP, ARP.


4. Observa por encima el flujo de tramas en el menú de Statistics en IO Graphs. La captura que estamos viendo incluye desde la inicialización (registro) de la aplicación hasta su finalización, con una llamada entremedias.
 ** Filtra por sip para conocer cuándo se envían paquetes SIP. ¿En qué segundos tienen lugar esos envíos?

En en los segundos:
7.5 - Register (Request)
14.5 - Intento de llamada 1 (Invite) No exitoso
16.5 - Intento de llamada 2 (Invite) Exitoso (recibe un 200 OK como respuesta)
38.5 - Bye (Request)
39.5 - 200 OK en respuesta al Bye
55.5 - Expires 0 (del Register Request)

 ** Y los paquetes con RTP, ¿cuándo se envían?

Se envían cuando se logra el establecimiento de la llamada, entre el segundo 16.5 y el 39.5
Normalmente debería ser un flujo constante pero observamos variaciones bastante grandes en la gráfica


[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

5. Analiza las primeras cuatro tramas de la captura nada más arrancar Ekiga.
 ** ¿Qué servicio es el utilizado en estas tramas?

DNS

 ** ¿Cuál es la dirección IP del servidor de nombres del ordenador que ha lanzado Ekiga?

80.58.61.250 (El 192 es el cliente, que le pide al servidor, el 80, la dirección de ekiga.net)

 ** ¿Qué dirección IP (de ekiga.net) devuelve el servicio de nombres?

86.64.162.35

 ** ¿Por qué se pide también para 35.162.64.86.in-addr.arpa?

Porque es la DNS inversa de 86.64.162.35 (necesario pedirla según el funcionamiento de Ekiga)


6. A continuación, hay más de una docena de tramas TCP/HTTP.
 ** ¿Podrías decir la URL que se está pidiendo?

http://ekiga.net/ip/

 ** ¿Qué user agent (UA) la está pidiendo?

Ekiga

 ** ¿Qué devuelve el servidor?

83.36.48.212 (es la ip pública del ordenador desde el que se está haciendo la captura)

 ** Si lanzamos el navegador web, por ejemplo, Mozilla Firefox, y vamos a la misma URL, ¿qué recibimos? ¿Qué es, entonces, lo que está respondiendo el servidor?

Nos muestra 193.147.49.119, que es la ip privada de los ordenadores del laboratorio.


7. Hasta la trama 45 se puede observar una secuencia de tramas del protocolo STUN.
 ** ¿Por qué crees que se hace uso de este protocolo en esta captura? Busca en la Wikipedia.

STUN (sigla en inglés de Session Traversal Utilities for NAT) es un protocolo de red del tipo cliente/servidor que permite a clientes NAT encontrar su dirección IP pública, el tipo de NAT en el que se encuentra y el puerto de Internet asociado con el puerto local a través de NAT. Esta información es usada para configurar una comunicación UDP entre dos hosts que se encuentren tras enrutadores NAT.
STUN es usado principalmente por teléfonos o software VoIP.

La explicación la encontramos más abajo:

STUN es útil como complementos de protocolos como SIP. SIP utiliza paquetes UDP para la señalización de tráfico de sonido, vídeo y texto sobre Internet, pero no permite establecer la comunicación cuando los extremos se encuentran detrás de enrutados NAT. Por ello suele usarse STUN en estas aplicaciones, para poder establecer la comunicación.

 ** ¿Estamos tras un NAT?

Si estamos usando STUN, podemos deducir que sí.


8. La trama 46 es la primera trama SIP. En un entorno como el de Internet, lo habitual es desconocer la dirección IP de la otra parte al realizar una llamada. Por eso, todo usuario registra su localización en un servidor Registrar. El Registrar guarda información sobre los usuarios en un servidor de localización que puede ser utilizado para localizar usuarios.
 ** ¿Qué dirección IP tiene el servidor Registrar?

86.64.162.35

 ** ¿A qué puerto (del servidor Registrar) se envían los paquetes SIP?

5060

 ** ¿Qué método SIP utiliza el UA para registrarse?

Register

 ** Además de REGISTER, ¿qué instrucciones SIP entiende el UA?

INVITE, ACK, OPTIONS, BYE, CANCEL, NOTIFY, REFER, MESSAGE


[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]


9. Fijémonos en las tramas siguientes a la número 46:
 ** ¿Se registra con éxito en el primer intento?

No 

** ¿Cómo sabemos si el registro se ha realizado correctamente o no?

Porque debemos recibir un 200 OK del servidor.

 ** ¿Podrías identificar las diferencias entre el primer intento y el segundo de registro? (fíjate en el tamaño de los paquetes y mira a qué se debe el cambio)

Tras recibir una respuesta del servidor diciendo que no está autorizado, se reenvía un Register igual que el primero pero añadiendo el campo Authorization, de forma que ahora tendrá 712 bytes en vez de 523.

 ** ¿Cuánto es el valor del tiempo de expiración de la sesión? Indica las unidades.

3600 segundos


10. Una vez registrados, podemos efectuar una llamada. Vamos a probar con el servicio de eco de Ekiga que nos permite comprobar si nos hemos conectado correctamente. El servicio de eco tiene la dirección sip:500@ekiga.net. Veamos el INVITE de cerca.
 ** ¿Puede verse el nombre del que efectúa la llamada, así como su dirección SIP?

Sí, en el paquete nº 84 dirigido a la dirección sip:500@ekiga.net, observamos un campo From con esa información ("Gregorio Robles\ <sip:grex@ekiga.net>)

 ** ¿Qué es lo que contiene el cuerpo de la trama? ¿En qué formato/protocolo está?

Contiene la información en formato SDP (Owner/creator, Session ID, Owner address, Session name, Connection Information, Media description...)

 ** ¿Tiene éxito el primer intento? ¿Cómo lo sabes?

No, el servidor le contesta diciendo que requiere autorización de proxy.
Se vuelve a enviar un Invite en el paquete 103, y esta vez obtiene como respuesta un 200 OK.

 ** ¿En qué se diferencia el segundo INVITE más abajo del primero? ¿A qué crees que se debe esto?

El segundo Invite cuenta con el campo Proxy-Authorization añadido, cumpliendo así los requisitos del servidor.


11. Una vez conectado, estudia el intercambio de tramas.
 ** ¿Qué protocolo(s) se utiliza(n)? ¿Para qué sirven estos protocolos?

RTP y RTCP.

 ** ¿Cuál es el tamaño de paquete de los mismos?

214 para RTP y 102 para RTCP.

 ** ¿Se utilizan bits de padding?

No, el campo padding tiene valor False (0).

 ** ¿Cuál es la periodicidad de los paquetes que se envían?

Atendiendo al campo TimeStamp vemos que cada mensaje RTP se envía cada 160 bytes/paquete.
Contando que los mensajes G.711 se transmiten a 64 kb/s (64000 bits/seg), esto supone un periodo de 1 bit cada 1.56*10⁻5 segundos.
También supone que enviamos 50 paquetes de 1280 bits (160 bytes) en 1 segundo, por lo tanto, obtenemos que el periodo (tiempo por paquete) es de: 1/50 = 0.02 segundos = 20 ms

(Aunque no se refleje luego en el tiempo real de los paquetes, dado que, como veremos después, existe jitter).

En los paquetes RTCP no observo una periodicidad fija.

 ** ¿Cuántos bits/segundo estamos enviando?

64000 bits/seg), ó 50 paquetes por segundo (Teoricamente, sin tener en cuenta los retrasos).

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

12. Vamos a ver más a fondo el intercambio RTP. En Telephony hay una opción RTP. Empecemos mirando los flujos RTP.
 ** ¿Cuántos flujos hay? ¿por qué?

Hay 2, vídeo y audio; uno al puerto 5014 de paquetes H.261 (ITU-T video compression standard), y otro al 5010 de paquetes G.711 (estándar de la ITU-T para la codificación de audio).

 ** ¿Cuántos paquetes se pierden?

0, ninguno.

 ** ¿Cuál es el valor máximo del delta? ¿Y qué es lo que significa el valor de delta?

1290.48 ms (Vídeo) y 1290.44 ms (Audio)

Es la latencia, o tiempo que tarda de ir desde un punto origen hasta un punto destino.

 ** ¿Cuáles son los valores de jitter (medio y máximo)? ¿Qué quiere decir eso? ¿Estamos ante una conversación de calidad?

V. Medio: 153.24 ms (Vídeo) y 42.50 ms (Audio)
V. máximo: 183.10 ms (Vídeo) y 119.64 ms (Audio)

"Jitter is the deviation from true periodicity of a presumed periodic signal"
Lo que significa que es lo que provoca que la señal no sea realmente periódica, y generalmente es malo. En este caso bastante malo, puesto que su valor medio es incluso superior que el periodo.


13. Elige un paquete RTP de audio. Analiza el flujo de audio en Telephony -> RTP -> Stream Analysis.
 ** ¿Cuánto valen el delta y el jitter para el primer paquete que ha llegado?

0 ambos.

 ** ¿Podemos saber si éste es el primer paquete que nos han enviado?

Si, al ser cero los valores anteriores podemos suponerlo, ya que se empezará a contar a partir de él.

 ** Los valores de jitter son menores de 10ms hasta un paquete dado. ¿Cuál?

Hasta el 247.

 ** ¿A qué se debe el cambio tan brusco del jitter?

A un retardo (latencia) especialmente grande.

 ** ¿Es comparable este cambio con el tiempo desde la recepción del paquete anterior? ¿Por qué?

Sí, hay un salto grande de tiempo entre el mensaje anterior y el 247.

 ** ¿Cuál es la dependencia entre el tiempo transcurrido desde el paquete anterior y el valor de jitter?

Directa, pues el jitter lo que indica es la desviación con respecto al periodo, así que cuanto más aumente la latencia, también lo hará el jitter.


14. En Telephony selecciona el menú VoIP calls. Verás que se lista la llamada de voz IP capturada en una ventana emergente. Selecciona esa llamada y pulsa el botón Graph.
 ** ¿Cuánto dura la conversación?

24,80 segundos

 ** ¿Cuáles son sus SSRC? ¿Por qué hay varios SSRCs? ¿Hay CSRCs?

Hay 2, uno para cada flujo.
Vídeo: 0x43306582
Audio: 0xBF4AFD37

No hay CSRCs porque ambos flujos no han sido mezclados.

15. Identifica la trama donde se finaliza la conversación.
 ** ¿Qué método SIP se utiliza?

BYE

 ** ¿En qué trama(s)?

Bye request: 924, 925, 927, 933. Respuestas: 938-941

 ** ¿Por qué crees que se envía varias veces?

Como comportamiento estándar, en vez de enviar un solo BYE y esperar que nos llegue su OK, sabiendo que pueden perderse cualquiera de esos paquetes o retrasarse, enviamos 4 seguidos (número razonable para tampoco saturar la línea) de forma que nos aseguramos de que tanto alguno de ellos como alguno de sus OK lleguen, pudiendo así finalizar la conexión de la manera más rapida posible.

16. Finalmente, se cierra la aplicación de VozIP.
 ** ¿Por qué aparece una instrucción SIP del tipo REGISTER?

Porque le mandamos al servidor de Ekiga un Register con el Expires a 0, para que nos borre de la sesión.

 ** ¿En qué trama sucede esto?

En la 950.

 ** ¿En qué se diferencia con la instrucción que se utilizó con anterioridad (al principio de la sesión)?

En el campo Expires puesto a 0, por lo explicado anteriormente.



[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

================================================================================
================================================================================

Captura de una sesión SIP

Captura una sesión SIP de una conversación con el número SIP sip:9999@qxip.net. Tendrás que dar de alta una cuenta en www.ekiga.net con el navegador. Recuerda también que has de comenzar a capturar tramas antes de arrancar Ekiga para ver todo el proceso en el que participa SIP. Para realizar los siguientes ejercicios, deberás crearte una cuenta en ekiga.net y darte de alta la lanzar la aplicación.

17. Observa las diferencias en el inicio de la conversación entre el entorno del laboratorio y el del ejercicio anterior:
 ** ¿Es necesario el uso de DNS y STUN? ¿Por qué?

Sí, hay paquetes DNS y STUN. Se utiliza DNS para la resolución de nombres de las máquinas y STUN porque estamos bajo ip's privadas, tras un router NAT.

 ** ¿Son diferentes el registro y la descripción de la sesión?

Según lo que puedo apreciar son bastante iguales.


18. Identifica las diferencias existentes entre esta conversación y la conversación anterior:
 ** ¿Cuántos flujos tenemos?

2, ambos de Audio (G.711).

 ** ¿Cuál es su periodicidad?

Es la misma (20 ms por paquete), dado que se envían 160 bytes por paquete al igual que antes.

 ** ¿Cuánto es el valor máximo del delta y los valores medios y máximo del jitter?

Flujo Audio 1: Max delta = 24.73 ms, Max Jitter = 0.91 ms, Jitter Medio = 0.43 ms
Flujo Audio 2: Max delta = 24.59 ms, Max Jitter = 1.14 ms, Jitter Medio = 0.41 ms

 ** ¿Podrías reproducir la conversación desde Wireshark? ¿Cómo? Comprueba que poniendo un valor demasiado pequeño para el buffer de jitter, la conversación puede no tener la calidad necesaria.

Sí, en el menú Telephony, RTP, Show All Streams, seleccionar un flujo y pulsar Analyze, y en la siguiente ventana pulsar Player. Aunque no funcione, debería salir el espectro del audio pulsando View as time of day.

 ** ¿Sabrías decir qué tipo de servicio ofrece sip:9999@qxip.net?

Ofrece servicio de Audio únicamente.


[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

19. Filtra por los paquetes SIP de la captura y guarda únicamente los paquetes SIP como sip.libpcap. Abre el fichero guardado para cerciorarte de que lo has hecho bien. Deberás guardarlo en un archivo de nombre p5.libpcap y añadirlo al repositorio.

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

[Al terminar la práctica, realiza un push para sincronizar tu repositorio GitHub]

[Recuerda mirar el guión para ver las instrucciones de entrega]
